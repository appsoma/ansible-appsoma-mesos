---
- hosts: localhost
  connection: local
  vars_files:
    - "cluster_vars/common.yml"
    - "cluster_vars/{{ cluster_name }}/required_vars.yml"
    - "cluster_vars/{{ cluster_name }}/aws_secret_vars.yml"
  roles:
    - role: ../roles/ansible-cloud-inventory-parse
      provider: "{{ cloud_provider }}"

# Check for SSH port function
- hosts: [ "{{ inventory_group_slave }}" ]
  remote_user: "{{ management_user }}"
  gather_facts: no
  vars_files:
    - "cluster_vars/common.yml"
    - "cluster_vars/{{ cluster_name }}/required_vars.yml"
  roles:
    - role: ansible-find-ssh
      when: alternate_ssh_port is defined

- hosts: [ "{{ inventory_group_slave }}" ]
  remote_user: "{{ management_user }}"
  sudo: True
  vars_files:
    - "cluster_vars/common.yml"
    - "cluster_vars/{{ cluster_name }}/required_vars.yml"
    - "cluster_vars/{{ cluster_name }}/users.yml"
  pre_tasks:
    # Allow sudo with no terminal
    - name: Remove require tty
      lineinfile: regexp="tty" dest=/etc/sudoers/os_defaults state=absent
      tags: ['system']

    - name: Add ssh keys to management user
      authorized_key: key="{{ item }}" state=present user=ubuntu exclusive=no
      with_items: additional_ssh_keys
      when: additional_ssh_keys is defined

  roles:
    # Install NTP for time sync
    - role: ansible-ntp

    # Install sysdig for troubleshooting
    - role: ansible-sysdig

    # Install CloudPassage Halo agent if available
    - role: ansible-cphalo
      halo_agent_key: "{{ cp_agent_key }}"
      halo_agent_tag: "{{ cp_agent_tag }}"
      when: use_halo is defined and use_halo

    # Install docker
    - role: ansible-docker

    # Configure NFS
    - role: ansible-nfs-client

    # Install Python
    - role: ansible-python

    # Make sure we have usable JDKs on masters
    - role: ansible-java
      java_versions: [7, 8]

    # Install mesos in slave mode
    - role: ansible-mesos
      mesos_containerizers: "docker,mesos"
      mesos_install_mode: "slave"
      mesos_node_type: "generic"

    - role: ansible-sensu
      sensu_mode: "client"
      ip_address: "{{ hostvars[inventory_hostname].private_ip_address }}"

  post_tasks:
    - name: Stop sensu
      service: name=sensu state=stopped

- hosts: localhost
  gather_facts: no
  vars_files:
    - "cluster_vars/common.yml"
    - "cluster_vars/{{ cluster_name }}/required_vars.yml"
    - "cluster_vars/{{ cluster_name }}/aws_secret_vars.yml"
  roles:
    # Burn an image from the completed slaves
    - role: ec2Burn
      source_instance_id: "{{hostvars[groups[inventory_group_slave][0]].instance_id }}"
      node_class: "{{ cluster_name }}_slave"
      when: create_slave_image and cloud_provider == "ec2"