---
- hosts: localhost
  connection: local
  vars_files:
    - "cluster_vars/common.yml"
    - "cluster_vars/{{ cluster_name }}/required_vars.yml"
    - "cluster_vars/{{ cluster_name }}/aws_secret_vars.yml"
  roles:
    - role: ../roles/ansible-cloud-inventory-parse
      provider: "{{ cloud_provider }}"

# Check for SSH port function
- hosts: [ "{{ inventory_group_master }}" ]
  remote_user: "{{ management_user }}"
  gather_facts: no
  vars_files:
    - "cluster_vars/common.yml"
    - "cluster_vars/{{ cluster_name }}/required_vars.yml"
  roles:
    - role: ansible-find-ssh
      when: alternate_ssh_port is defined

- hosts: [ "{{ inventory_group_master }}",  "{{ inventory_group_slave }}", "{{ inventory_group_service }}"]
  remote_user: "{{ management_user }}"
  sudo: True
  vars_files:
    - "cluster_vars/common.yml"
    - "cluster_vars/{{ cluster_name }}/required_vars.yml"
    - "cluster_vars/{{ cluster_name }}/users.yml"
  pre_tasks:

    - name: Add AWS vars
      include_vars: "cluster_vars/{{ cluster_name }}/aws_secret_vars.yml"
      no_log: true
      when: "(cloud_provider is defined and cloud_provider == 'ec2') or (use_docker_registry is defined and use_docker_registry)"

    - name: Find NFS Server IP
      set_fact: nfs_server_ip={{ hostvars[groups[inventory_group_service][0]]['private_ip_address'] }}
      when: groups[inventory_group_service] is defined

    - name: Set zookeeper private IP list with port
      set_fact:
        zookeeper_hosts_with_port: |
          {% set comma = joiner(',') %}
          {% for item in groups[inventory_group_master] -%}
            {{ comma() }}{{ hostvars[item].private_ip_address }}:{{ zookeeper_client_port }}
          {%- endfor %}

    - name: Set master_0 hostname
      set_fact: master_0_hostname="{{ item }}"
      with_items: groups[inventory_group_master]
      when: hostvars[ item ].short_name == "master_0"

    - name: Set master_1 hostname
      set_fact: master_1_hostname="{{ item }}"
      with_items: groups[inventory_group_master]
      when: hostvars[ item ].short_name == "master_1"

    - name: Save zookeeper private IP list to bash profile
      lineinfile: dest=/etc/profile.d/appsoma_env.sh line="export ZK_HOST_LIST={{ zookeeper_hosts_with_port }}" state=present create=yes

    - name: Save cluster name to bash profile
      lineinfile: dest=/etc/profile.d/appsoma_env.sh line="export CLUSTER_NAME={{ cluster_name }}" state=present create=yes

    - name:  Set zookeeper private IP list
      set_fact:
        zookeeper_hosts_no_port: |
          {% set comma = joiner(',') %}
          {% for item in groups[inventory_group_master] -%}
            {{ comma() }}{{ hostvars[item].private_ip_address }}
          {%- endfor %}

    - name: Set Service instance store list
      set_fact: instance_stores="{{ service_nodes.instance_stores if service_nodes.instance_stores is defined else [] }}"
      when: inventory_hostname in groups[inventory_group_service]

    - name: Set Master instance store list
      set_fact: instance_stores="{{ masters.instance_stores if masters.instance_stores is defined else [] }}"
      when: inventory_hostname in groups[inventory_group_master]

    - name: Set Slave instance store list
      set_fact: instance_stores="{{ slave_types[hostvars[inventory_hostname].type].instance_stores if slave_types[hostvars[inventory_hostname].type].instance_stores is defined else [] }}"
      when: inventory_group_slave in groups and inventory_hostname in groups[inventory_group_slave]

    - name: Set Service additional volume list
      set_fact: additional_volumes="{{ service_nodes.additional_volumes if service_nodes.additional_volumes is defined else [] }}"
      when: inventory_hostname in groups[inventory_group_service]

    - name: Set Master additional volume list
      set_fact: additional_volumes="{{ masters.additional_volumes if masters.additional_volumes is defined else [] }}"
      when: inventory_hostname in groups[inventory_group_master]

    - name: Set Slave additional volume list
      set_fact: additional_volumes="{{ slave_types[hostvars[inventory_hostname].type].additional_volumes if slave_types[hostvars[inventory_hostname].type].additional_volumes is defined else [] }}"
      when: inventory_group_slave in groups and inventory_hostname in groups[inventory_group_slave]

    - name: Set Mesos Master mode
      set_fact: mesos_master_mode="{{ 'master-slave' if run_slave_on_master is defined and run_slave_on_master else 'master' }}"

    - name: Add ssh keys to management user
      authorized_key: key="{{ item }}" state=present user=ubuntu exclusive=no
      with_items: additional_ssh_keys
      when: additional_ssh_keys is defined

  roles:
####### System software config #######
    # Extra storage on nodes (esp. service nodes)
    - role: ansible-cloud-extra-storage
      provider: "{{ cloud_provider }}"
      instance_store_list: "{{ instance_stores }}"
      additional_volume_list: "{{ additional_volumes }}"

    # Configure node as an NFS server
    - role: ansible-nfs-server
      nfs_exports:
        - "path": "{{ nfs_data_mount }}"
          "opts": "{{private_lan_subnet}}(rw,sync,no_subtree_check,no_root_squash,nohide)"
      when: inventory_hostname == groups[inventory_group_service][0]

    # Configure NFS
    - role: ansible-nfs-client
      nfsmount: "{{ data_mount_point }}"
      nfspath: "{{ nfs_data_mount }}"
      nfsserver: "{{ nfs_server_ip }}"
      when: nfs_server_ip is defined and inventory_hostname != groups[inventory_group_service][0]

    # Install Docker
    - role: ansible-docker
      registry_host: "{{ 'docker-registry.marathon.mesos' if use_docker_registry else '' }}"

    # Create an users
    - role: ansible-welder-user
      group: "{{ welder_group }}"
      user_list: "{{ welder_user_list }}"
      dataDir: "{{ data_mount_point }}"

    # Install NTP for time sync
    - role: ansible-ntp

    # Install sysdig for troubleshooting
    #- role: ansible-sysdig

    # Install CloudPassage Halo agent if available
    - role: ansible-cphalo
      halo_agent_key: "{{ cp_agent_key }}"
      halo_agent_tag: "{{ cp_agent_tag }}"
      when: use_halo is defined and use_halo

    # Add UFW firewall if selected (should not be used with halo)
    - role: ansible-ufw
      extra_ports: "{{ master_firewall_ports if inventory_hostname in groups[inventory_group_master] else [] }}"
      when: use_ufw is defined and use_ufw

####### Development tools and libraries #######
    # Install Python
    - role: ansible-python

    # Install NodeJs
    - role: ansible-nvm-nodejs
      nodejs_version: "v0.12.4"
      nodejs_global_packages:
        - browserify
        - mocha
        - nodejs-websocket
#        - phantomjs
        - process
        - require
        - scribe-js
        - supervisor
      tags: ["nodejs"]
      when: inventory_hostname in groups[inventory_group_master]

    # Make sure we have JDKs
    - role: ansible-java
      java_versions: [7, 8]
      add_jdk: "{{ inventory_hostname in groups[inventory_group_master] }}"
      when: "inventory_hostname in groups[inventory_group_master] or (inventory_group_slave in groups and inventory_hostname in groups[inventory_group_slave])"

    - role: ansible-go
      when: inventory_hostname in groups[inventory_group_master]

    - role: ansible-maven
      when: inventory_hostname in groups[inventory_group_master]

####### Cluster management software #######
    # Install zookeeper
    - role: ansible-zookeeper
      zookeeper_hosts: "{{ groups[inventory_group_master] }}"
      zookeeper_id: "{{ hostvars[inventory_hostname]['zoo_id'] }}"
      when: inventory_hostname in groups[inventory_group_master]

    # Install Mesos
    - role: ansible-mesos
      zookeeper_hostnames: "{{ zookeeper_hosts_with_port  }}"
      mesos_install_mode: "{{ mesos_master_mode if inventory_hostname in groups[inventory_group_master] else 'slave' }}"
      mesos_containerizers: "docker,mesos"
      mesos_cluster_name: "{{cluster_name}}"
      mesos_node_type: "{{ hostvars[inventory_hostname].type }}"
      mesos_hostname: "{{ hostvars[inventory_hostname].short_name }}.{{ cluster_name }}.internal"
      when: "inventory_hostname in groups[inventory_group_master] or (inventory_group_slave in groups and inventory_hostname in groups[inventory_group_slave])"

    # Install Marathon
    - role: ansible-marathon
      zookeeper_hostnames: "{{ zookeeper_hosts_with_port  }}"
      when: inventory_hostname in groups[inventory_group_master]

    - role: ansible-filebeat
      mesos_log_dir: "{{ mesos_work_dir }}/mesos_log"
      mesos_dir: "{{ mesos_work_dir }} "
      appsoma_dir: "{{ appsoma_log_dir }}"
      node_type: "{{ hostvars[inventory_hostname].type }}"
      node_name: "{{ hostvars[inventory_hostname].short_name }}"
      when: use_monitoring is defined and use_monitoring

    - role: ansible-sensu
      sensu_mode: "client-master"
      sensu_master: "{{ hostvars[master_0_hostname].private_ip_address }}"
      mesos_master_list: "{{ zookeeper_hosts_no_port }}"
      system_name: "{{ hostvars[inventory_hostname].system_name }}"
      ip_address: "{{ hostvars[inventory_hostname].private_ip_address }}"
      when: use_monitoring is defined and use_monitoring

    - role: ansible-mesos-dns
      zookeeper_host_list: "{{ zookeeper_hosts_with_port }}"
      marathon_host: "{{ hostvars[master_0_hostname].private_ip_address }}"
      mesos_dns_hosts: "{{ hostvars[master_0_hostname].private_ip_address }}{{ ',' + hostvars[master_1_hostname].private_ip_address if masters.count > 1 else ''}}"

- include: playbooks/marathon_services.yml
- include: playbooks/welder_playbook.yml
