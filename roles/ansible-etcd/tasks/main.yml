- name: Fetch etcd source
  git: repo=https://github.com/coreos/etcd.git dest=/opt/etcd
  register: fetched_etcd

- name: Check for existing etcd
  file: path=/etc/init/etcd.conf state=file
  register: etcd_exists
  failed_when: false

- name: Stop etcd
  service: name=etcd state=stopped
  when: fetched_etcd.changed and etcd_exists.state == 'file'

- name: Check build
  file: path=/opt/etcd/bin/etcd state=file
  failed_when: false
  register: etcd_check

- name: Build etcd
  shell: "./build"
  args:
    chdir: /opt/etcd
  when: fetched_etcd.changed or etcd_check.state == 'absent'
  register: build_etcd

- name: Install etcd
  command: cp /opt/etcd/bin/etcd /usr/local/bin/etcd
  when: build_etcd.changed

- name: Install etcdctl
  command: cp /opt/etcd/bin/etcdctl /usr/local/bin/etcdctl
  when: build_etcd.changed

- name: Create host items
  set_fact: host_item="{{ hostvars[item]['ec2_tag_Name'] }}=http://{{ hostvars[item]['ec2_private_ip_address'] }}:2380"
  with_items: "groups[cluster_group]"
  register: host_items

- name: Create hostlist string
  set_fact: hostlist="{{ host_items.results | map(attribute='ansible_facts.host_item') | join(',') }}"

- name: Install etcd.sh
  template: src=etcd.sh.j2 dest=/opt/etcd/etcd.sh mode=744

- name: Install service conf
  template: src=etcd.conf.j2 dest=/etc/init/etcd.conf

- name: Start etcd
  service: name=etcd state=started enabled=yes

- name: Make internals dir
  shell: "/usr/local/bin/etcdctl mkdir /internals"
  register: make_internals
  changed_when: make_internals.stdout == "" and make_internals.stderr.find('Key already exists') == -1
  failed_when: make_internals.stderr != "" and make_internals.stderr.find('Key already exists') == -1
  when: inventory_hostname == groups[inventory_group_master][0]

- name: Make externals dir
  shell: "/usr/local/bin/etcdctl mkdir /externals"
  register: make_externals
  changed_when: make_externals.stdout == "" and make_externals.stderr.find('Key already exists') == -1
  failed_when: make_externals.stderr != "" and make_externals.stderr.find('Key already exists') == -1
  when: inventory_hostname == groups[inventory_group_master][0]

- name: Make haproxy bridge dir
  shell: "/usr/local/bin/etcdctl mkdir /haproxy-marathon-bridge"
  register: make_haproxy
  changed_when: make_haproxy.stdout == "" and make_haproxy.stderr.find('Key already exists') == -1
  failed_when: make_haproxy.stderr != "" and make_haproxy.stderr.find('Key already exists') == -1
  when: inventory_hostname == groups[inventory_group_master][0]



