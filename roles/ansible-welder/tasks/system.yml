- name: Install PAM dev libraries (Debian/Ubuntu)
  apt: pkg=libpam0g-dev state=present
  when: ansible_os_family == "Debian"

- name: Install PAM dev libraries (RedHat/Centos)
  yum: pkg=pam-devel state-present
  when: ansible_os_family == "RedHat"

- name: Clone Welder source
  git:
    dest: "{{ welder_dir }}"
    repo: https://github.com/appsoma/welder.git
    version: "{{ welder_version if welder_version is defined else 'HEAD' }}"
    update: yes
    force: yes
  sudo: yes
  sudo_user: "{{ management_user }}"
  register: git_pull
  notify: Restart Welder

- name: Add Certificate
  copy: src="{{ welder_cert_path }}" dest="{{  welder_etc_dir }}/certificate.crt" mode=600
  sudo: yes
  sudo_user: "{{ welder_user }}"
  when: welder_use_tls

- name: Add Certificate key
  copy: src="{{ welder_key_path }}" dest="{{  welder_etc_dir }}/certificate.key" mode=600
  sudo: yes
  sudo_user: "{{ welder_user }}"
  when: welder_use_tls

- name: Fetch Welder configuration template
  fetch: src="{{ welder_dir }}/config.json.template" dest="../templates/{{ cluster_name }}.welder.config.json.j2" flat=yes

- name: Create Welder Configuration
  template: src="../templates/{{ cluster_name }}.welder.config.json.j2" dest="{{ welder_etc_dir}}/config.json"
  notify: Restart Welder

- name: Create Welder Init script
  template: src=init_welder.conf.j2 dest=/etc/init/welder.conf
  notify: Restart Welder

- name: Create Welder Widgets Init script
  template: src=init_welder-widgets.conf.j2 dest=/etc/init/welder-widgets.conf
  notify: Restart Welder Widgets

- name: Run NPM for widgets
  shell: "cd {{  welder_dir }}/widgets; npm install;"
  sudo: yes
  sudo_user: "{{ welder_user }}"
  register: npmwidgets
  failed_when: npmwidgets.stderr.find('ERROR') != -1
  changed_when: npmwidgets.stdout != ''
  notify: Restart Welder

- name: Browserify widgets
  shell: "cd {{  welder_dir }}/widgets; ./build"
  sudo: yes
  sudo_user: "{{ welder_user }}"
  register: browserifywidgets
  failed_when: browserifywidgets.stderr.find('ERROR') != -1

- name: Run NPM for welder
  shell: "cd {{  welder_dir }}; npm install"
  sudo: yes
  sudo_user: "{{ welder_user }}"
  register: npmwelder
  failed_when: npmwelder.stderr.find('ERROR') != -1
  changed_when: npmwelder.stdout != ''
  notify: Restart Welder

- name: Start Welder
  service: name=welder state=started enabled=yes

- name: Start Welder Widgets
  service: name=welder-widgets state=started enabled=yes







