- include: package.yml
  when: use_package and not use_source

- include: source.yml
  when: use_source and not use_package

- name: Create Pegboard directory
  file: path="{{ pegboard_dir }}" state=directory owner="{{ management_user }}"

- name: Create Pegboard log directory
  file: path="{{ pegboard_log_dir }}" state=directory

- name: Get Pegboard bridge
  git:
    repo: "https://github.com/appsoma/pegboard.git"
    dest: "{{ pegboard_dir }}"
    version: "{{ pegboard_version if pegboard_version is defined else 'HEAD' }}"
    update: yes
    force: yes
  sudo: yes
  sudo_user: "{{ management_user }}"

- name: Install Python Kazoo client
  command: /usr/bin/pip install kazoo
  register: pip_kazoo
  changed_when: pip_kazoo.stdout.find('Requirement already satisfied') == 1

- name: Get zookeeper CLI
  get_url:
    url: https://github.com/outbrain/zookeepercli/releases/download/v1.0.10/zookeepercli_1.0.10_amd64.deb
    dest: /opt/haproxy/zookeepercli_1.0.10_amd64.deb
    force: yes

- name: Install zookeeper CLI
  apt: deb=/opt/haproxy/zookeepercli_1.0.10_amd64.deb state=present

- name: Create SSL certificate
  copy: src="{{ haproxy_pem_file }}" dest=/opt/haproxy/haproxy.pem mode=0600
  when: haproxy_use_ssl

- name: Create backend config
  template: src=haproxy_backend.cfg.j2 dest="{{ pegboard_dir }}/haproxy_backend.cfg" owner="{{ management_user }}"

- name: Create frontend config
  template: src=haproxy_frontend.cfg.j2 dest="{{ pegboard_dir }}/haproxy_frontend.cfg" owner="{{ management_user }}"

- name: Create tcp config
  template: src=haproxy_tcp.cfg.j2 dest="{{ pegboard_dir }}/haproxy_tcp.cfg" owner="{{ management_user }}"

- name: Create general config
  template: src=haproxy_general.cfg.j2 dest="{{ pegboard_dir }}/haproxy_general.cfg" owner="{{ management_user }}"

- name: Create start/stop convenience script
  template: src=pegboard.sh.j2 dest="{{ pegboard_dir }}/pegboard.sh" mode=0755

- name: Install Pegboard
  shell: "{{ pegboard_dir }}/pegboard.sh install"
  args:
    chdir: "{{ pegboard_dir }}"

- name: Stop Pegboard
  shell: "{{ pegboard_dir }}/pegboard.sh stop"

- name: Start Pegboard
  shell: "{{ pegboard_dir }}/pegboard.sh start"
  register: start_pegboard
  failed_when: "start_pegboard.stderr != '' and ( start_pegboard.stderr.find('already exists') == -1 and start_pegboard.stderr.find('object is not callable') == -1) "

- name: Wait for Pegboard to start
  wait_for: host=127.0.0.1 port=2288

- name: Set service configuration in Pegboard
  command: curl -X POST localhost:2288/apps -d "url={{ item['url'] }}" -d "app_name={{ item['app_name'] }}" -d "service_port={{ item['service_port'] }}" -d "servers=master.mesos:{{ item['port'] }}"
  with_items: haproxy_dns_services

