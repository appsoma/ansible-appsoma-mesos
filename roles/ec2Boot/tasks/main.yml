- include: find_last_index.yml

- name: set master instance type
  set_fact: instance_type="{{ master_instance_type }}"
  when: node_class == master_class_name

- name: set service instance type
  set_fact: instance_type="{{ service_instance_type }}"
  when: node_class == service_class_name

- name: set slave instance type
  set_fact: instance_type="{{ slave_instance_type }}"
  when: node_class == slave_class_name

- name: Set security group ID
  set_fact: security_group_id="{{ aws_master_security_group_id }}"
  when: node_class == master_class_name

- name: Set security group ID
  set_fact: security_group_id="{{ aws_all_security_group_id }}"
  when: node_class != master_class_name

- name: "Guarantee {{ count }} node(s) are booted for class {{ node_class }}"
  ec2:
    key_name: "{{ ec2_key_name }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    instance_type: "{{ instance_type }}"
    image: "{{ ec2_ami_id }}"
    wait: yes
    exact_count: "{{ count }}"
    count_tag:
      Class: "{{ node_class }}"
    instance_tags:
      Class: "{{ node_class }}"
      cluster: "{{ cluster_name }}"
    assign_public_ip: yes
    region: "{{ ec2_region }}"
    zone: "{{ ec2_zone }}"
    group_id: "{{ security_group_id }}"
    vpc_subnet_id: "{{ aws_vpc_subnet_id }}"
  register: ec2Create
  tags:
    - create
#  notify:
#    - wait for ssh

- name: Create DNS entries
  route53:
    command: create
    overwrite: yes
    type: CNAME
    zone: "{{ route53_zone }}"
    zone: "{{ route53_zone }}"
    ttl: 10
    record: "{{node_class}}_{{ item.ami_launch_index | int + start_id | int }}.{{route53_zone}}"
    value: "{{ item.public_dns_name }}"
  with_items: ec2Create.instances
  when: use_route53

- name: tag instances
  ec2_tag: region="{{ ec2_region }}" resource="{{ item.id }}" aws_access_key="{{ aws_access_key }}" aws_secret_key="{{ aws_secret_key }}"
  args:
    tags:
      Name: "{{node_class}}_{{ item.ami_launch_index | int + start_id | int }}"
      id: "{{ item.ami_launch_index | int + start_id | int }}"
      Class: "{{ node_class }}"
  with_items: ec2Create.instances
  tags:
    - tag

- name: add zookeeper tag to masters
  ec2_tag: region="{{ ec2_region }}" resource="{{ item.id }}" aws_access_key="{{ aws_access_key }}" aws_secret_key="{{ aws_secret_key }}"
  args:
    tags:
      zoo_id: "{{ item.ami_launch_index | int + start_id | int }}"
  with_items: ec2Create.instances
  tags:
    - tag
  when: node_class == master_class_name

- name: add masters to in-memory host list
  add_host:
    hostname: "{{ item.public_ip }}"
    groupname: "{{node_group_name}}"
    ec2_id: "{{ item.id }}"
    ec2_ip_address: "{{ item.public_ip }}"
    ec2_private_ip_address: "{{ item.private_ip }}"
    ec2_tag_id: "{{ item.ami_launch_index | int + start_id | int }}"
    ec2_tag_zoo_id: "{{ item.ami_launch_index | int + start_id | int}}"
  with_items: ec2Create.instances
  tags:
    - create
  when: node_class == master_class_name

- name: add slaves and other classes to in-memory host list
  add_host:
    hostname: "{{ item.public_ip }}"
    groupname: "{{node_group_name}}"
    ec2_id: "{{ item.id }}"
    ec2_ip_address: "{{ item.public_ip }}"
    ec2_private_ip_address: "{{ item.private_ip }}"
    ec2_tag_id: "{{ item.ami_launch_index | int + start_id | int }}"
  with_items: ec2Create.instances
  tags:
    - create
  when: node_class != master_class_name

- name: Track service instances
  set_fact: service_instances="{{ ec2Create.instances }}"
  when: node_class == service_class_name

- name: Track master instances
  set_fact: master_instances="{{ ec2Create.instances }}"
  when: node_class == master_class_name

- name: Track slave instances
  set_fact: slave_instances="{{ ec2Create.instances }}"
  when: node_class == slave_class_name








