# Resources for defining instances in the cluster
resource "aws_instance" "service" {

  availability_zone = "${var.aws_info.zone}"
  ami = "${lookup(var.aws_image, var.aws_info.region)}"
  instance_type = "${var.aws_instance_type.service}"
  key_name = "${var.boot_key.name}"
  subnet_id = "${aws_subnet.subnet.id}"
  vpc_security_group_ids = ["${aws_security_group.slave_sg.id}"]
  associate_public_ip_address = true
  tags {
    Name = "${var.cluster_name}_service_${count.index}"
    short_name =  "service_${count.index}"
    type = "service"
    id = "${count.index}"
    cluster = "${var.cluster_name}"
    Class = "${var.cluster_name}_service"
  }
  root_block_device {
    volume_type = "${var.instance_volume_type.service}"
{% if service_nodes.root_volume_type is defined and  service_nodes.root_volume_type == 'io1' %}
    iops = {{ service_nodes.root_volume_iops }}
{% endif %}
    volume_size = "${var.instance_root_disk_size_gb.service}"
    delete_on_termination = true
  }
{% if service_nodes.additional_volumes is defined %}
{% for vol in service_nodes.additional_volumes %}
  ebs_block_device {
    volume_type = "{{ vol.type }}"
{% if vol.type == 'io1' %}
    iops = {{ vol.iops }}
{% endif %}
    volume_size = "{{ vol.size_gb }}"
    delete_on_termination = true
    device_name = "{{ vol.device_name }}"
  }
{% endfor %}
{% endif %}
  count = "${var.type_count.service}"
}

resource "aws_instance" "master" {

  availability_zone = "${var.aws_info.zone}"
  ami = "${lookup(var.aws_image, var.aws_info.region)}"
  instance_type = "${var.aws_instance_type.master}"
  key_name = "${var.boot_key.name}"
  subnet_id = "${aws_subnet.subnet.id}"
  vpc_security_group_ids = ["${aws_security_group.master_sg.id}"]
  associate_public_ip_address = true
{% if masters.root_volume_ebs_optimized is defined %}
  ebs_optimized = {{ 'true' if masters.root_volume_ebs_optimized else 'false' }}
{% endif %}
  tags {
    Name = "${var.cluster_name}_master_${count.index}"
    short_name =  "master_${count.index}"
    type = "master"
    id = "${count.index}"
    zoo_id = "${count.index}"
    cluster = "${var.cluster_name}"
    Class = "${var.cluster_name}_master"
  }
  root_block_device {
    volume_type = "${var.instance_volume_type.master}"
{% if masters.root_volume_type is defined and masters.root_volume_type == 'io1' %}
    iops = {{ masters.root_volume_iops }}
{% endif %}
    volume_size = "${var.instance_root_disk_size_gb.master}"
    delete_on_termination = true
  }
{% if masters.additional_volumes is defined %}
{% for vol in masters.additional_volumes %}
  ebs_block_device {
    volume_type = "{{ vol.type }}"
{% if vol.type == 'io1' %}
    iops = {{ vol.iops }}
{% endif %}
    volume_size = "{{ vol.size_gb }}"
    delete_on_termination = true
    device_name = "{{ vol.device_name }}"
  }
{% endfor %}
{% endif %}
  count = "${var.type_count.master}"
}

{% for s_type in slave_types %}
resource "aws_instance" "{{ s_type }}" {
  availability_zone = "${var.aws_info.zone}"
  ami = "{{ slave_ami if slave_ami is defined else '${lookup(var.aws_image, var.aws_info.region)}' }}"
  instance_type = "${var.aws_instance_type.{{ s_type }}}"
  key_name = "${var.boot_key.name}"
  subnet_id = "${aws_subnet.subnet.id}"
  vpc_security_group_ids = ["${aws_security_group.slave_sg.id}"]
  associate_public_ip_address = true
  tags {
    Name = "${var.cluster_name}_{{ s_type }}_${count.index}"
    short_name =  "{{ s_type }}_${count.index}"
    type = "{{ s_type }}"
    id = "${count.index}"
    cluster = "${var.cluster_name}"
    Class = "${var.cluster_name}_slave"
  }
{% if slave_types[s_type].root_volume_ebs_optimized is defined %}
  ebs_optimized = {{ 'true' if slave_types[s_type].root_volume_ebs_optimized else 'false' }}
{% endif %}
  root_block_device {
    volume_type = "${var.instance_volume_type.{{ s_type }}}"
{% if slave_types[s_type].root_volume_type is defined and slave_types[s_type].root_volume_type == 'io1' %}
    iops = {{ slave_types[s_type].root_volume_iops }}
{% endif %}
    volume_size = "${var.instance_root_disk_size_gb.{{ s_type }}}"
    delete_on_termination = true

  }
{% if slave_types[s_type].additional_volumes is defined %}
{% for vol in slave_types[s_type].additional_volumes %}
  ebs_block_device {
    volume_type = "{{ vol.type }}"
{% if vol.type == 'io1' %}
    iops = {{ vol.iops }}
{% endif %}
    volume_size = "{{ vol.size_gb }}"
    delete_on_termination = true
    device_name = "{{ vol.device_name }}"
  }
{% endfor %}
{% endif %}
{% if slave_types[s_type].instance_stores is defined and slave_types[s_type].instance_stores|length > 0 %}
{% for i in slave_types[s_type].instance_stores %}
  ephemeral_block_device {
    device_name = "{{ i.device_name }}"
    virtual_name = "{{ i.virtual_name }}"
  }
{% endfor %}
{% endif %}
{% if local_slave_deploy is defined and local_slave_deploy == "true" %}
  provisioner "remote-exec" {
    inline = [
      "sudo mkdir -p {{ scaler_dir }}",
      "sudo chown -R ubuntu {{ scaler_dir }}",
      "sudo apt-get install -y git",
      "cd {{ scaler_dir }}; git clone https://github.com/appsoma/ansible-appsoma-mesos.git .",
      "cd {{ scaler_dir }}; git checkout {{ deploy_version }}",
      "chmod 700 {{ scaler_dir }}/install_ansible.bash",
      "cd {{ scaler_dir }}; sudo ./install_ansible.bash local",
      "mkdir -p {{ scaler_dir }}/cluster_vars/{{ cluster_name }}"
    ]
    connection {
      type = "ssh"
      user = "{{ management_user }}"
      key_file = "{{ ansible_dir }}/cluster_vars/{{ cluster_name }}/{{ cluster_name }}_key.pem"
    }
  }
  provisioner "file" {
    source = "{{ ansible_dir }}/cluster_vars/{{ cluster_name }}/required_vars.yml"
    destination = "{{ scaler_dir }}/cluster_vars/{{ cluster_name }}/required_vars.yml"
    connection {
      type = "ssh"
      user = "{{ management_user }}"
      key_file = "{{ ansible_dir }}/cluster_vars/{{ cluster_name }}/{{ cluster_name }}_key.pem"
    }
  }
  provisioner "file" {
    source = "{{ ansible_dir }}/cluster_vars/{{ cluster_name }}/users.yml"
    destination = "{{ scaler_dir }}/cluster_vars/{{ cluster_name }}/users.yml"
    connection {
      type = "ssh"
      user = "{{ management_user }}"
      key_file = "{{ ansible_dir }}/cluster_vars/{{ cluster_name }}/{{ cluster_name }}_key.pem"
    }
  }
  provisioner "remote-exec" {
    inline = [
      "cd {{ scaler_dir }}; ansible-playbook local_slave_deploy_playbook.yml -e cluster_name='{{ cluster_name }}' -e system_name='${var.cluster_name}_{{ s_type }}_${count.index}' -e nfs_server_ip='${aws_instance.service.private_ip}' -e slave_type='{{ s_type }}' -e short_name='{{ s_type }}_${count.index}' -e mesos_master_ip_list='${aws_instance.master.private_ip}'"
    ]
    connection {
      type = "ssh"
      user = "{{ management_user }}"
      key_file = "{{ ansible_dir }}/cluster_vars/{{ cluster_name }}/{{ cluster_name }}_key.pem"
    }
  }
{% endif %}
  count = "${var.type_count.{{ s_type }}}"
}

{% endfor %}

