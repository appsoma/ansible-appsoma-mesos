---
- hosts: [ "{{ inventory_group_slave }}" ]
  remote_user: ubuntu
  sudo: True
  vars_files:
    - playbook_vars/common.yml
    - playbook_vars/required_vars.yml
    - playbook_vars/users.yml
  pre_tasks:
    # Allow sudo with no terminal
    - name: Remove require tty
      lineinfile: regexp="tty" dest=/etc/sudoers/os_defaults state=absent
      tags: ['system']
    - name: Find NFS Server IP
      set_fact: nfsServerIp={{ hostvars[groups[inventory_group_service][0]]['ec2_private_ip_address'] }}
      when: groups[inventory_group_service] is defined
    - name:  Set zookeeper private IP list with ports
      set_fact:
        zookeeper_hosts_with_port: |
          {% set comma = joiner(':' + zookeeper_client_port + ',') %}
          {% for item in groups[inventory_group_master] -%}
            {{ comma() }}{{ hostvars[item].ec2_private_ip_address }}:{{ zookeeper_client_port }}
          {%- endfor %}


  roles:
    # Install docker
    - role: ansible-docker

    # Configure NFS
    - role: ansible-nfs-client
      nfsmount: "{{ data_mount_point }}"
      nfspath: "{{ nfs_data_mount }}"
      nfsserver: "{{ nfsServerIp }}"
      when: nfsServerIp is defined

    # Create an users
    - role: ansible-welder-user
      group: "{{ welder_group }}"
      user_list: "{{ welder_user_list }}"
      dataDir: "{{ data_mount_point }}"

    # Install Python
    - role: ansible-python

    # Install NodeJs
    - role: ansible-nvm-nodejs

    # Make sure we have usable JDKs on masters
    - role: ansible-java
      java_versions: [6, 7]

    # Install mesos in slave mode
    - role: ansible-mesos
      mesos_containerizers: "docker,mesos"
      zookeeper_hostnames: "{{ zookeeper_hosts_with_port }}"
      mesos_install_mode: "slave"
      mesos_cluster_name: "{{cluster_name}}"

- hosts: localhost
  gather_facts: no
  vars_files:
    - playbook_vars/common.yml
    - playbook_vars/required_vars.yml
    - playbook_vars/aws_secret_vars.yml
  roles:
    # Burn an image from the completed slaves
    - role: ec2Burn
      source_instance_id: "{{hostvars[groups[inventory_group_slave][0]]['ec2_id']}}"
      node_class: "{{ slave_class_name }}"
      when: create_slave_image