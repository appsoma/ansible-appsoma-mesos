---
- hosts: localhost
  connection: local
  vars_files:
    - "cluster_vars/common.yml"
    - "cluster_vars/{{ cluster_name }}/required_vars.yml"
    - "cluster_vars/{{ cluster_name }}/aws_secret_vars.yml"
  roles:
    - role: ../roles/ansible-cloud-inventory-parse
      provider: "{{ cloud_provider }}"

# Check for SSH port function
- hosts: [ "{{ inventory_group_slave }}" ]
  remote_user: "{{ management_user }}"
  gather_facts: no
  vars_files:
    - "cluster_vars/common.yml"
    - "cluster_vars/{{ cluster_name }}/required_vars.yml"
  roles:
    - role: ansible-find-ssh
      when: alternate_ssh_port is defined

- hosts: [ "{{ inventory_group_slave }}" ]
  remote_user: "{{ management_user }}"
  sudo: True
  vars_files:
    - "cluster_vars/common.yml"
    - "cluster_vars/{{ cluster_name }}/required_vars.yml"
    - "cluster_vars/{{ cluster_name }}/users.yml"
  pre_tasks:
    # Allow sudo with no terminal
    - name: Remove require tty
      lineinfile: regexp="tty" dest=/etc/sudoers/os_defaults state=absent
      tags: ['system']
      
    - name: Find NFS Server IP
      set_fact: nfs_server_ip={{ hostvars[groups[inventory_group_service][0]]['private_ip_address'] }}
      when: groups[inventory_group_service] is defined

    - name: Save zookeeper private IP list to bash profile
      lineinfile: dest=/etc/profile.d/appsoma_env.sh line="export ZK_HOST_LIST=master.mesos:2181" state=present create=yes

    - name: Set master_0 hostname
      set_fact: master_0_hostname="{{ item }}"
      with_items: groups[inventory_group_master]
      when: hostvars[ item ].short_name == "master_0"

    - name: Set master_1 hostname
      set_fact: master_1_hostname="{{ item }}"
      with_items: groups[inventory_group_master]
      when: hostvars[ item ].short_name == "master_1"
      
    - name: Save cluster name to bash profile
      lineinfile: dest=/etc/profile.d/appsoma_env.sh line="export CLUSTER_NAME={{ cluster_name }}" state=present create=yes

    - name: Add ssh keys to management user
      authorized_key: key="{{ item }}" state=present user=ubuntu exclusive=no
      with_items: additional_ssh_keys
      when: additional_ssh_keys is defined


    - name: Set instance store list
      set_fact: instance_stores="{{slave_types[hostvars[inventory_hostname].type].instance_stores if slave_types[hostvars[inventory_hostname].type].instance_stores is defined else [] }}"

    - name: Set additional volume list
      set_fact: additional_volumes="{{slave_types[hostvars[inventory_hostname].type].additional_volumes if slave_types[hostvars[inventory_hostname].type].additional_volumes is defined else [] }}"

  roles:
    - role: ansible-cloud-extra-storage
      provider: "{{ cloud_provider }}"
      instance_store_list: "{{ instance_stores }}"
      additional_volume_list: "{{ additional_volumes }}"

    # Install NTP for time sync
    - role: ansible-ntp

    # Install sysdig for troubleshooting
    #- role: ansible-sysdig

    # Install CloudPassage Halo agent if available
    - role: ansible-cphalo
      halo_agent_key: "{{ cp_agent_key }}"
      halo_agent_tag: "{{ cp_agent_tag }}"
      when: use_halo is defined and use_halo

    # Add UFW firewall if selected (should not be used with halo)
    - role: ansible-ufw
      extra_ports: "{{ slave_firewall_ports if slave_firewall_ports is defined else [] }}"
      when: use_ufw is defined and use_ufw

    # Install docker
    - role: ansible-docker
      when: use_docker_registry is not defined or not use_docker_registry

    - role: ansible-docker
      registry_host: "master.mesos"
      marathon_host: "{{ hostvars[master_0_hostname].private_ip_address }}"
      when: use_docker_registry is defined and use_docker_registry

    # Configure NFS
    - role: ansible-nfs-client
      nfsmount: "{{ data_mount_point }}"
      nfspath: "{{ nfs_data_mount }}"
      nfsserver: "{{ nfs_server_ip }}"
      when: nfs_server_ip is defined

    # Configure Jumpcloud
    - role: ansible-jumpcloud
      when: jumpcloud_key is defined

    # Create local users
    - role: ansible-welder-user
      group: "welder"
      user_list: "{{ welder_user_list }}"
      when: jumpcloud_key is not defined

    # Install Python
    - role: ansible-python

    # Make sure we have usable JDKs on masters
    - role: ansible-java
      java_versions: [7, 8]

    - role: ansible-mesos-dns
      mesos_dns_hosts: "{{ hostvars[master_0_hostname].private_ip_address }}{{ ',' + hostvars[master_1_hostname].private_ip_address if masters.count > 1 else ''}}"

    # Install mesos in slave mode
    - role: ansible-mesos
      mesos_containerizers: "docker,mesos"
      zookeeper_hostnames: "master.mesos:2181"
      mesos_install_mode: "slave"
      mesos_cluster_name: "{{cluster_name}}"
      mesos_node_type: "{{ hostvars[inventory_hostname].type }}"
      mesos_hostname: "{{ hostvars[inventory_hostname].short_name }}.{{ cluster_name }}.internal"

    - role: ansible-sensu
      sensu_mode: "client-slave"
      sensu_master: "{{ hostvars[master_0_hostname]['private_ip_address'] }}"
      system_name: "{{ hostvars[inventory_hostname].system_name }}"
      ip_address: "{{ hostvars[inventory_hostname].private_ip_address }}"
      when: use_monitoring is defined and use_monitoring