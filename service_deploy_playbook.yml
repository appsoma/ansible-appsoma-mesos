---
- hosts: localhost
  connection: local
  vars_files:
    - "cluster_vars/common.yml"
    - "cluster_vars/{{ cluster_name }}/required_vars.yml"
    - "cluster_vars/{{ cluster_name }}/aws_secret_vars.yml"
  roles:
    - role: ../roles/ansible-cloud-inventory-parse
      provider: "{{ cloud_provider }}"

# Check for SSH port function
- hosts: [ "{{ inventory_group_service }}" ]
  remote_user: "{{ management_user }}"
  gather_facts: no
  vars_files:
    - "cluster_vars/common.yml"
    - "cluster_vars/{{ cluster_name }}/required_vars.yml"
  roles:
    - role: ansible-find-ssh
      when: alternate_ssh_port is defined

# Start configuring the service node
- hosts: [ "{{ inventory_group_service }}" ]
  vars_files:
    - "cluster_vars/common.yml"
    - "cluster_vars/{{ cluster_name }}/required_vars.yml"
    - "cluster_vars/{{ cluster_name }}/users.yml"
  remote_user: "{{ management_user }}"
  sudo: yes
  pre_tasks:
    - name:  Set zookeeper private IP list with ports
      set_fact:
        zookeeper_hosts_with_port: |
          {% set comma = joiner(':' + zookeeper_client_port + ',') %}
          {% for item in groups[inventory_group_master] -%}
            {{ comma() }}{{ hostvars[item].private_ip_address }}:{{ zookeeper_client_port }}
          {%- endfor %}

    - name:  Set zookeeper private IP list
      set_fact:
        zookeeper_hosts_no_port: |
          {% set comma = joiner(',') %}
          {% for item in groups[inventory_group_master] -%}
            {{ comma() }}{{ hostvars[item].private_ip_address }}
          {%- endfor %}

    - name: Format data volume
      filesystem: fstype=ext4 dev="/dev/xvdf"
      when: inventory_hostname == groups[inventory_group_service][0]

    - name: Mount data volume
      mount: name="{{ nfs_data_mount }}" src="/dev/xvdf" fstype=ext4 state=mounted
      when: inventory_hostname == groups[inventory_group_service][0]

    - name: Add ssh keys to management user
      authorized_key: key="{{ item }}" state=present user=ubuntu exclusive=no
      with_items: additional_ssh_keys
      when: additional_ssh_keys is defined

  roles:
    # Install NTP for time sync
    - role: ansible-ntp

    # Install sysdig for troubleshooting
    - role: ansible-sysdig

    # Install CloudPassage Halo agent if available
    - role: ansible-cphalo
      halo_agent_key: "{{ cp_agent_key }}"
      halo_agent_tag: "{{ cp_agent_tag }}"
      when: use_halo is defined and use_halo

    # Add firewall
    - role: ansible-ufw
      extra_ports: "{{ service_firewall_ports if service_firewall_ports is defined else [] }}"
      when: use_ufw is defined and use_ufw

    # Add VPN server
    - role: ansible-openvpn-server
      when: use_openvpn is defined and use_openvpn

    # Install Docker
    - role: ansible-docker
      when: use_docker_registry is not defined or not use_docker_registry

    - role: ansible-docker
      registry_host: "master.mesos"
      marathon_host: "{{ hostvars[groups[inventory_group_master][0]].private_ip_address }}"
      when: use_docker_registry is defined and use_docker_registry

    # Create an Appsoma user as a member of the docker group (permission to run /usr/bin/docker)
    - role: ansible-welder-user
      dataDir: "{{ nfs_data_mount }}"
      group: "{{ welder_group }}"
      user_list: "{{ welder_user_list }}"
      enableDocker: true

    # Configure node as an NFS server
    - role: ansible-nfs-server
      nfs_exports:
        - "path": "{{ nfs_data_mount }}"
          "opts": "{{private_lan_subnet}}(rw,sync,no_subtree_check,no_root_squash,nohide)"
      when: inventory_hostname == groups[inventory_group_service][0]

    - role: ansible-mesos-dns
      mesos_dns_hosts: [ "{{ hostvars[groups[inventory_group_master][0]].private_ip_address }}" ]

    - role: ansible-sensu
      sensu_master: "{{ hostvars[groups[inventory_group_master][0]]['private_ip_address'] }}"
      mesos_master_list: "{{ zookeeper_hosts_no_port }}"
      system_name: "{{ hostvars[inventory_hostname].system_name }}"
      ip_address: "{{ hostvars[inventory_hostname].private_ip_address }}"
