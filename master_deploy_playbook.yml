---

- include: playbooks/ec2_inventory_parse.yml
  when: cloud_provider == "ec2"

# Check for SSH port function
- hosts: [ "{{ inventory_group_master }}" ]
  remote_user: "{{ management_user }}"
  gather_facts: no
  vars_files:
    - "cluster_vars/common.yml"
    - "cluster_vars/{{ cluster_name }}/required_vars.yml"
  roles:
    - role: ansible-find-ssh
      when: alternate_ssh_port is defined

- hosts: localhost
  connection: local
  vars_files:
    - "cluster_vars/common.yml"
    - "cluster_vars/{{ cluster_name }}/required_vars.yml"
    - "cluster_vars/{{ cluster_name }}/aws_secret_vars.yml"
  tasks:
    - name: Create Service Discovery subnet wildcard DNS record
      route53:
        command: create
        overwrite: yes
        type: CNAME
        zone: "{{ route53_zone }}"
        ttl: 10
        record: "{{ service_discovery_subnet }}.{{ route53_zone }}"
        value: "{{ hostvars[groups[inventory_group_master][0]]['public_dns_name'] }}"
      when: use_service_discovery_subnet is defined and use_service_discovery_subnet and use_route53 is defined and use_route53

- hosts: [ "{{ inventory_group_master }}" ]
  remote_user: "{{ management_user }}"
  sudo: True
  vars_files:
    - "cluster_vars/common.yml"
    - "cluster_vars/{{ cluster_name }}/required_vars.yml"
    - "cluster_vars/{{ cluster_name }}/users.yml"
  pre_tasks:

    - name: Find NFS Server IP
      set_fact: nfsServerIp={{ hostvars[groups[inventory_group_service][0]]['private_ip_address'] }}
      when: groups[inventory_group_service] is defined

    - name: Set zookeeper private IP list with port
      set_fact:
        zookeeper_hosts_with_port: |
          {% set comma = joiner(':' + zookeeper_client_port + ',') %}
          {% for item in groups[inventory_group_master] -%}
            {{ comma() }}{{ hostvars[item].private_ip_address }}:{{ zookeeper_client_port }}
          {%- endfor %}

    - name: Save zookeeper private IP list to bash profile
      lineinfile: dest=/etc/profile.d/zookeeper_host_list.sh line="export ZK_HOST_LIST={{ zookeeper_hosts_with_port }}" state=present create=yes

    - name:  Set zookeeper private IP list
      set_fact:
        zookeeper_hosts_no_port: |
          {% set comma = joiner(',') %}
          {% for item in groups[inventory_group_master] -%}
            {{ comma() }}{{ hostvars[item].private_ip_address }}
          {%- endfor %}

    - name: Set master to run slave
      set_fact: mesos_mode='master-slave'
      when: run_slave_on_master is defined and run_slave_on_master

    - name: Set master to not run slave
      set_fact: mesos_mode='master'
      when: run_slave_on_master is not defined or not run_slave_on_master

    - name: Add ssh keys to management user
      authorized_key: key="{{ item }}" state=present user=ubuntu exclusive=no
      with_items: additional_ssh_keys
      when: additional_ssh_keys is defined

  roles:
    # Install sysdig for troubleshooting
    - role: ansible-sysdig

    # Install CloudPassage Halo agent if available
    - role: ansible-cphalo
      halo_agent_key: "{{ cp_agent_key }}"
      halo_agent_tag: "{{ cp_agent_tag }}"
      when: use_halo is defined and use_halo

    # Add UFW firewall if selected (should not be used with halo)
    - role: ansible-ufw
      extra_ports: "{{ master_firewall_ports }}"
      when: use_ufw is defined and use_ufw

    # Install Python
    - role: ansible-python

    # Install NodeJs
    - role: ansible-nvm-nodejs
      nodejs_version: "v0.12.4"
      nodejs_global_packages:
        - browserify
        - mocha
        - nodejs-websocket
        - phantomjs
        - process
        - require
        - scribe-js
        - supervisor
      tags: ["nodejs"]

    # Install Docker
    - role: ansible-docker

    # Configure NFS
    - role: ansible-nfs-client
      nfsmount: "{{ data_mount_point }}"
      nfspath: "{{ nfs_data_mount }}"
      nfsserver: "{{ nfsServerIp }}"
      when: nfsServerIp is defined

    # Create an users
    - role: ansible-welder-user
      group: "{{ welder_group }}"
      user_list: "{{ welder_user_list }}"
      dataDir: "{{ data_mount_point }}"

    # Make sure we have usable JDKs on masters
    - role: ansible-java
      java_versions: [6, 7, 8]

    - role: ansible-go

    # Install zookeeper
    - role: ansible-zookeeper
      zookeeper_hosts: "{{ groups[inventory_group_master] }}"
      zookeeper_id: "{{ hostvars[inventory_hostname]['ec2_tag_zoo_id'] }}"

    # Install High Availability Proxy
    - role: ansible-haProxy
      zookeeper_host_list: "{{zookeeper_hosts_with_port}}"

    # Install mesos in master mode
    - role: ansible-mesos
      zookeeper_hostnames: "{{ zookeeper_hosts_with_port  }}"
      mesos_install_mode: "{{ mesos_mode }}"
      mesos_cluster_name: "{{cluster_name}}"
      mesos_hostname: "{{ hostvars[inventory_hostname]['private_ip_address'] }}"

    # Install marathon
    - role: ansible-marathon
      zookeeper_hostnames: "{{ zookeeper_hosts_with_port  }}"
      when: inventory_hostname == groups[inventory_group_master][0]

- include: playbooks/kafka_playbook.yml
- include: playbooks/storm_playbook.yml
- include: playbooks/rhino_playbook.yml
- include: playbooks/welder_playbook.yml

