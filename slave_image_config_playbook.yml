---
- hosts: [ localhost ]
  remote_user: "{{ management_user }}"
  sudo: True
  vars_files:
    - "cluster_vars/common.yml"
    - "cluster_vars/{{ cluster_name }}/required_vars.yml"
    - "cluster_vars/{{ cluster_name }}/users.yml"
  pre_tasks:
    # Allow sudo with no terminal
    - name: Remove require tty
      lineinfile: regexp="tty" dest=/etc/sudoers/os_defaults state=absent
      tags: ['system']

    - name: Find NFS Server IP
      set_fact: nfs_server_ip={{ nfs_service_ip }}
      when: groups[inventory_group_service] is defined

    # {{ zookeeper_hosts_with_port }}

    - name: Save zookeeper private IP list to bash profile
      lineinfile: dest=/etc/profile.d/zookeeper_host_list.sh line="export ZK_HOST_LIST={{ zookeeper_hosts_with_port }}" state=present create=yes

    - name: Add ssh keys to management user
      authorized_key: key="{{ item }}" state=present user=ubuntu exclusive=no
      with_items: additional_ssh_keys
      when: additional_ssh_keys is defined

  roles:

    # Install CloudPassage Halo agent if available
    - role: ansible-cphalo
      halo_agent_key: "{{ cp_agent_key }}"
      halo_agent_tag: "{{ cp_agent_tag }}"
      when: use_halo is defined and use_halo and cp_agent_key is defined and cp_agent_tag is defined

    # Add UFW firewall if selected (should not be used with halo)
    - role: ansible-ufw
      extra_ports: "{{ slave_firewall_ports if slave_firewall_ports is defined else [] }}"
      when: use_ufw is defined and use_ufw and slave_firewall_ports is defined

    # Install docker
    - role: ansible-docker
      when: use_docker_registry is not defined or not use_docker_registry

    - role: ansible-docker
      registry_host: "master.mesos"
      marathon_host: "{{ marathon_host }}"
      when: use_docker_registry is defined and use_docker_registry

    # Configure NFS
    - role: ansible-nfs-client
      nfsmount: "{{ data_mount_point }}"
      nfspath: "{{ nfs_data_mount }}"
      nfsserver: "{{ nfs_server_ip }}"
      when: nfs_server_ip is defined

    # Install mesos in slave mode
    - role: ansible-mesos
      mesos_containerizers: "docker,mesos"
      zookeeper_hostnames: "{{ zookeeper_hosts_with_port }}"
      mesos_install_mode: "slave"
      mesos_cluster_name: "{{ cluster_name }}"

    - role: ansible-mesos-dns
      mesos_dns_hosts: [ "{{ mesos_dns_server }}" ]

    - role: ansible-sensu
      sensu_master: "{{ sensu_server }}"