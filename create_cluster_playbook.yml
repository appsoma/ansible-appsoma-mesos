---
- hosts: localhost
  connection: local
  vars_files:
    - "cluster_vars/common.yml"
    - "cluster_vars/{{ cluster_name }}/required_vars.yml"
    - "cluster_vars/{{ cluster_name }}/aws_secret_vars.yml"
  roles:
    # Create a VPC
    - role: ec2Vpc
      when: "aws_master_security_group_id is not defined or aws_master_security_group_id is not defined"

    # Boot the NFS server node
    - role: ec2Boot
      count: 1
      node_class: "{{service_class_name}}"
      node_group_name: "{{ inventory_group_service }}"

      # Boot the masters
    - role: ec2Boot
      count: "{{ master_count }}"
      node_class: "{{ master_class_name }}"
      node_group_name: "{{ inventory_group_master }}"

    # Boot the slaves
    - role: ec2Boot
      count: "{{ slave_count }}"
      node_class: "{{ slave_class_name }}"
      node_group_name: "{{ inventory_group_slave }}"
      when: slave_count is defined and slave_count > 0

  post_tasks:
    - name: wait for service nodes to be available
      local_action: wait_for host="{{ item.public_dns_name }}" port=22 delay=60 timeout=320 state=started
      with_items: service_instances
      when: service_instances is defined

    - name: Add data volume
      ec2_vol:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ ec2_region }}"
        zone: "{{ ec2_zone }}"
        device_name: "/dev/xvdf"
        volume_type: "{{ data_vol_type }}"
        volume_size: "{{ data_vol_size_gb }}"
        instance: "{{ hostvars[groups[inventory_group_service][0]]['ec2_id'] }}"
        state: present

    - name: wait for master nodes to be available
      local_action: wait_for host="{{ item.public_dns_name }}" port=22 delay=60 timeout=320 state=started
      with_items: master_instances
      when: master_instances is defined

    - name: wait for slave nodes to be available
      local_action: wait_for host="{{ item.public_dns_name }}" port=22 delay=60 timeout=320 state=started
      with_items: slave_instances
      when: slave_instances is defined


# Start configuring the service node
- hosts: [ "{{ inventory_group_service }}" ]
  vars_files:
    - "cluster_vars/common.yml"
    - "cluster_vars/{{ cluster_name }}/required_vars.yml"
    - "cluster_vars/{{ cluster_name }}/users.yml"
  remote_user: ubuntu
  sudo: yes
  pre_tasks:
    - name: Format data volume
      filesystem: fstype=ext4 dev="/dev/xvdf"
    - name: Mount data volume
      mount: name="{{ nfs_data_mount }}" src="/dev/xvdf" fstype=ext4 state=mounted
  roles:
    # Install Docker
    - role: ansible-docker

    # Create an Appsoma user as a member of the docker group (permission to run /usr/bin/docker)
    - role: ansible-welder-user
      dataDir: "{{ nfs_data_mount }}"
      group: "{{ welder_group }}"
      user_list: "{{ welder_user_list }}"
      enableDocker: true

    # Configure node as an NFS server
    - role: ansible-nfs-server
      nfs_exports:
        - "path": "{{ nfs_data_mount }}"
          "opts": "{{private_lan_subnet}}(rw,sync,no_subtree_check,no_root_squash,nohide)"

- include: master_deploy_playbook.yml
- include: slave_deploy_playbook.yml
